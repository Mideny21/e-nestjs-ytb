// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  email     String     @unique
  password  String     @db.VarChar(200)
  name      String     @db.VarChar(200)
  address   String     @db.VarChar(200)
  role      USER_ROLE? @default(DEFAULT)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Order     Order[]
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(200)
  price        String         @db.VarChar(100)
  description  String         @db.VarChar(1000)
  stock        String         @db.VarChar(200)
  categoryId   Int
  category     Category       @relation(fields: [categoryId], references: [id])
  createdAt    DateTime       @default(now())
  updateAt     DateTime       @updatedAt
  ProductImage ProductImage[]
  OrderItem    OrderItem[]
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  url       String
  productId Int
  produc    Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(200)
  createdAt DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  Product   Product[]
}

model Order {
  id         Int          @id @default(autoincrement())
  userId     Int
  user       User         @relation(fields: [userId], references: [id])
  status     ORDER_STATUS @default(PENDING)
  createdAt  DateTime     @default(now())
  updateAt   DateTime     @updatedAt
  totalPrice Float?
  orderItems OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  name      String
  price     String?
  total     String?
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

enum ORDER_STATUS {
  PENDING
  PROCESSING
  PAID
  DELIVERED
  CANCELED
}

enum USER_ROLE {
  ADMIN
  DEFAULT
}
